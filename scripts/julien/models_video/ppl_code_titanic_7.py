import os
import pandas as pd
import pymc3 as pm
import numpy as np
import theano.tensor as tt
from theano.ifelse import ifelse
from mb_modelbase.models_core.pyMC3_model import ProbabilisticPymc3Model
def create_fun():
   def code_to_fit(file='../data/titanic_cleaned.csv', modelname='titanic_7', fit=True, dtm=None, pp_graph=None):
            # income is gaussian, depends on age
            filepath = os.path.join(os.path.dirname(__file__), '../data/titanic_cleaned.csv')
            df_model_repr = pd.read_csv(filepath)
            df_orig = dtm.backward(df_model_repr, inplace=False)
            if fit:
                modelname = modelname + '_fitted'
            # Set up shared variables

            model = pm.Model()
            data = None
            with model:
                survived = pm.Categorical('survived', p=[0.0185,0.9815])
                sex = pm.Categorical('sex', p=tt.switch(tt.eq(survived, 0), [0.5,0.5], [0.5,0.5]))
                ticket = pm.Categorical('ticket', p
                boat = pm.Categorical('boat', p=[0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721,0.03703703703703721])
                pclass = pm.Categorical('pclass', p=tt.switch(tt.eq(sex, 0), [0.3348999999999999,0.3348999999999999,0.3348999999999999], [0.3348999999999999,0.3348999999999999,0.3348999999999999]))
                age = pm.Normal('age', mu=tt.switch(tt.eq(sex, 0), tt.switch(tt.eq(pclass, 0), 36.3818, tt.switch(tt.eq(pclass, 1), 26.6532, 23.2432)), tt.switch(tt.eq(pclass, 0), 35.2674, tt.switch(tt.eq(pclass, 1), 19.0421, 24.256))), sigma=tt.switch(tt.eq(sex, 0), tt.switch(tt.eq(pclass, 0), 13.4375, tt.switch(tt.eq(pclass, 1), 12.6723, 11.1538)), tt.switch(tt.eq(pclass, 0), 13.9977, tt.switch(tt.eq(pclass, 1), 16.3204, 9.8869))))
                fare = pm.Normal('fare', mu=tt.switch(tt.eq(sex, 0), tt.switch(tt.eq(pclass, 0), age*-0.1021+66.0231875, tt.switch(tt.eq(pclass, 1), age*-0.1614+66.0231875, age*-0.0615+66.0231875)), tt.switch(tt.eq(pclass, 0), age*-1.1111+66.0231875, tt.switch(tt.eq(pclass, 1), age*-0.3316+66.0231875, age*0.0988+66.0231875))), sigma=tt.switch(tt.eq(sex, 0), tt.switch(tt.eq(pclass, 0), 48.3724625, tt.switch(tt.eq(pclass, 1), 48.3724625, 48.3724625)), tt.switch(tt.eq(pclass, 0), 48.3724625, tt.switch(tt.eq(pclass, 1), 48.3724625, 48.3724625))))
                embarked = pm.Categorical('embarked', p=tt.switch(tt.eq(pclass, 0), [0.2638411764705882,0.2638411764705882,0.2638411764705882], tt.switch(tt.eq(pclass, 1), [0.2638411764705882,0.2638411764705882,0.2638411764705882], [0.2638411764705882,0.2638411764705882,0.2638411764705882])))
                has_cabin_number = pm.Categorical('has_cabin_number', p=tt.switch(tt.eq(pclass, 0), [0.5,0.5], tt.switch(tt.eq(pclass, 1), [0.5,0.5], [0.5,0.5])))
                
            m = ProbabilisticPymc3Model(modelname, model, data_mapping=dtm, probabilistic_program_graph=pp_graph)
            m.nr_of_posterior_samples = 1000
            if fit:
                m.fit(df_orig, auto_extend=False)
            return df_orig, m
   return code_to_fit